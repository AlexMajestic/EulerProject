from math import sqrt


def func_task_12(n):
    """
    Последовательность треугольных чисел образуется путем сложения натуральных чисел.
    К примеру, 7-ое треугольное число равно 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. Первые десять треугольных чисел:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Перечислим делители первых семи треугольных чисел:

     1: 1
     3: 1, 3
     6: 1, 2, 3, 6
    10: 1, 2, 5, 10
    15: 1, 3, 5, 15
    21: 1, 3, 7, 21
    28: 1, 2, 4, 7, 14, 28
    Как мы видим, 28 - первое треугольное число, у которого более пяти делителей.

    Каково первое треугольное число, у которого более пятисот делителей?
    """
    count = num = add = 0
    while count < n:
        count = 0
        add += 1
        num += add

        # Исходим из предположения, что для больших чисел оптимальнее искать числа, кратные 2, 3 и 5
        # как наиболее часто встречающиеся для количества делителей >50
        if n > 50 and (num % 2 != 0 or num % 3 != 0 or num % 5 != 0):
            continue

        for i in range(1, int(sqrt(num)) + 1):
            if num % i == 0:
                count += 2  # Считаем также число, которое получается в результате деления
    return num

# Ниже приведены тесты
import unittest


class TestTask12(unittest.TestCase):
    def test_short(self):
        self.assertEqual(func_task_12(4), 6)

    def test_short2(self):
        self.assertEqual(func_task_12(6), 28)

    def test_task(self):
        self.assertEqual(func_task_12(500), 76576500)


if __name__ == '__main__':
    unittest.main()