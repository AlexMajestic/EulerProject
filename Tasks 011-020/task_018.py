def func_task_18():
    """
    Начиная в вершине треугольника (см. пример ниже) и перемещаясь вниз на смежные числа,
    максимальная сумма до основания составляет 23.

    3
    7 4
    2 4 6
    8 5 9 3

    То есть, 3 + 7 + 4 + 9 = 23.

    Найдите максимальную сумму пути от вершины до основания следующего треугольника:

    Примечание: Так как в данном треугольнике всего 16384 возможных маршрута от вершины до основания,
    эту задачу можно решить проверяя каждый из маршрутов. Однако похожая Задача 67 с треугольником,
    состоящим из сотни строк, не решается перебором (brute force) и требует более умного подхода! ;o)
    """
    triangle = [
        [75],
        [95, 64],
        [17, 47, 82],
        [18, 35, 87, 10],
        [20, 4, 82, 47, 65],
        [19, 1, 23, 75, 3, 34],
        [88, 2, 77, 73, 7, 63, 67],
        [99, 65, 4, 28, 6, 16, 70, 92],
        [41, 41, 26, 56, 83, 40, 80, 70, 33],
        [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
        [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
        [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
        [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
        [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
        [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]
    ]
    maximum = [0]
    find_best_way(maximum, triangle, [triangle[0][0]])
    return maximum[0]


def find_best_way(maximum, triangle, way, x=0, y=0):
    if y == len(triangle) - 1:
        maximum[0] = sum(way) if sum(way) > maximum[0] else maximum[0]
        return

    y += 1
    way.append(triangle[y][x])
    find_best_way(maximum, triangle, way=way, x=x, y=y)
    way.pop()

    way.append(triangle[y][x+1])
    find_best_way(maximum, triangle, way=way, x=x+1, y=y)
    way.pop()


# Ниже приведены тесты
import unittest


class TestTask18(unittest.TestCase):
    def test_task(self):
        self.assertEqual(func_task_18(), 1074)


if __name__ == '__main__':
    unittest.main()